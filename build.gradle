buildscript {
    dependencies {
        classpath 'com.github.dexman545:Outlet:1.6.1'
    }
}
plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
    id 'com.modrinth.minotaur' version '2.+'
    id 'org.ajoberstar.reckon' version '0.13.1'
}
apply plugin: 'io.github.dexman545.outlet'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withSourcesJar()
}

outlet.allowSnapshotsForProject = false
outlet.mcVersionRange = ">=${project.minecraft_version}"

group = project.group
description = project.displayname
archivesBaseName = project.name


loom {
    mixin.defaultRefmapName = 'invasion.mixin.refmap.json'
   // accessWidenerPath = file('src/main/resources/invasion.aw')
}

reckon {
    scopeFromProp()
    stageFromProp('beta', 'rc', 'final')
}

repositories {
    mavenLocal()
    maven { name 'modmenu'; url 'https://maven.terraformersmc.com/releases' }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modApi "net.fabricmc:fabric-loader:${project.loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    /*
    compile "mcp.mobius.waila:Waila:${waila_version}_${mc_version}"
    compile "codechicken:CodeChickenCore:1.7.10-1.0.7.48:dev"
    compile "codechicken:CodeChickenLib:1.7.10-1.1.3.141:dev"
    compile "codechicken:NotEnoughItems:1.7.10-1.0.5.120:dev"
    compile fileTree(dir: 'libs', include: '*.jar')
    */

    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version.toString()

    filesMatching("fabric.mod.json") {
        expand "version": project.version.toString(),
                "minecraftVersion": ">=${project.minecraft_version}",
                "loaderVersion": ">=${project.loader_version}",
                "fabricVersion": ">=${project.fabric_version}"
    }

    from 'LICENSE'
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}


tasks.modrinth {
    onlyIf {
      def stage = version.version.stage.value
      stage == null || stage.name != 'beta'
    }
}

modrinth {
    token = System.env.MODRINTH_KEY
    projectId = project.modrinth_project_id
    //featured = true
    versionNumber = version.toString()
    versionName = archivesBaseName + '-' + version
    changelog = "[Changelog](https://github.com/MineLittlePony/MineLittlePony/releases/tag/${version.toString()})"
    loaders = ['fabric', 'quilt']
    uploadFile = remapJar
    outlet.mcVersions().each{ver ->
      gameVersions.add ver
    }
    dependencies {
       required.project 'P7dR8mSH' // Fabric API
    }
}

